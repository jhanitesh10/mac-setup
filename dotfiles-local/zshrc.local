setopt hist_ignore_space
setopt hist_reduce_blanks
setopt hist_verify
setopt bang_hist

# No history.
alias ls=' ls -G'
alias cd=' cd'
alias clear=' clear'

# Grep with color
alias grep='grep --color=auto'

# psql
PSPLIST=homebrew.mxcl.postgresql.plist
PSLPATH=$LA/$PSPLIST
alias pg_start="launchctl load $PSLPATH"
alias pg_stop="launchctl unload $PSLPATH"

# Mime
autoload -U zsh-mime-setup
zsh-mime-setup

# Word selection
autoload -U select-word-style
select-word-style bash

# Completion
setopt BASH_AUTO_LIST
setopt NO_AUTO_MENU
setopt NO_ALWAYS_LAST_PROMPT

CACHEDIR="$HOME/.config/cache/zsh"

# create $CACHEDIR if it does not exist
if [ ! -d $CACHEDIR ]; then
mkdir -p $CACHEDIR
fi

zmodload -i zsh/complist
setopt hash_list_all          # hash everything before completion
setopt completealiases        # complete alisases
setopt complete_in_word       # allow completion anywhere in the word/phrase
setopt always_to_end          # completion always moves cursor to the end
setopt correct                # spelling correction for commands
setopt list_ambiguous         # complete until the first ambiguous choice

users=(memorang root)


zstyle ':completion::complete:*'             use-cache on                          # completions are cached,
                                                                                   # use rehash to clear
zstyle ':completion:*'                       cache-path $CACHEDIR                  # cache path
zstyle ':completion:*'                       matcher-list 'm:{a-zA-Z}={A-Za-z}'    # ignore case
zstyle ':completion:*'                       list-colors ${(s.:.)LS_COLORS}        # colorz !

# list of completers to use
zstyle ':completion:*::::'                   completer _expand _complete _ignored _approximate
zstyle ':completion:*'                       menu select=2 _complete _ignored _approximate

# match uppercase from lowercase
zstyle ':completion:*'                       matcher-list 'm:{a-z}={A-Z}'

# offer indexes before parameters in subscripts
zstyle ':completion:*:*:-subscript-:*'       tag-order indexes parameters

zstyle ':completion:*'                       verbose yes
zstyle ':completion:*:descriptions'          format '%B%d%b'
zstyle ':completion:*:messages'              format '%d'
zstyle ':completion:*:warnings'              format 'No matches for: %d'
zstyle ':completion:*:corrections'           format '%B%d (errors: %e)%b'
zstyle ':completion:*'                       group-name ''

zstyle ':completion:*:manuals'               separate-sections true

zstyle ':completion:*:processes'             command 'ps -au$USER'
zstyle ':completion:*:*:kill:*'              menu yes select
zstyle ':completion:*:kill:*'                force-list always
zstyle ':completion:*:*:kill:*:processes'    list-colors '=(#b) #([0-9]#)*=29=34'
zstyle ':completion:*:*:killall:*'           menu yes select
zstyle ':completion:*:killall:*'             force-list always

zstyle ':completion:*' "users $users"

# ignore completion functions (until the _ignored completer)
zstyle ':completion:*:functions'             ignored-patterns '_*'
zstyle ':completion:*:scp:*'                 tag-order 'files users hosts:-host hosts:-domain:domain hosts:-ipaddr:IP\ Address *'
zstyle ':completion:*:scp:*'                 group-order files all-files users hosts-domain hosts-host hosts-ipaddr
zstyle ':completion:*:ssh:*'                 tag-order 'users hosts:-host hosts:-domain:domain hosts:-ipaddr:IP\ Address *'
zstyle ':completion:*:ssh:*'                 group-order hosts-domain hosts-host users hosts-ipaddr

zstyle '*' single-ignored show

# Functions.
zman() {
    PAGER="less -g -s '+/^      "$1"'" man zshall
}

# Nav
setopt auto_cd
setopt auto_remove_slash

setopt extended_glob
setopt glob_dots
setopt print_exit_value

unsetopt beep
unsetopt bg_nice
unsetopt clobber
unsetopt hist_beep
unsetopt hup
unsetopt ignore_eof
unsetopt list_beep
unsetopt rm_star_silent

setopt auto_pushd
setopt pushd_ignore_dups
setopt pushd_silent
setopt pushd_to_home


# Zsh's history-beginning-search-backward is very close to Vim's C-x C-l
history-beginning-search-backward-then-append() {
  zle history-beginning-search-backward
  zle vi-add-eol
}
zle -N history-beginning-search-backward-then-append

# Delete all characters between a pair of characters. Mimics vim's "di" text object functionality
function delete-in {

  # Create locally-scoped variables we'll need
  local CHAR LCHAR RCHAR LSEARCH RSEARCH COUNT

  # Read the character to indicate which text object we're deleting
  read -k CHAR

  if [ "$CHAR" = "w" ]
  then
    # diw, delete the word

    # find the beginning of the word under the cursor
    zle vi-backward-word

    # set the left side of the delete region at this point
    LSEARCH=$CURSOR

    # find the end of the word under the cursor
    zle vi-forward-word

    # set the right side of the delete region at this point
    RSEARCH=$CURSOR

    # Set the BUFFER to everything except the word we are removing
    RBUFFER="$BUFFER[$RSEARCH+1,${#BUFFER}]"
    LBUFFER="$LBUFFER[1,$LSEARCH]"

    return

  # diw was unique. For everything else, we just have to define the
  # characters to the left and right of the cursor to be removed
  elif [ "$CHAR" = "(" ] || [ "$CHAR" = ")" ] || [ "$CHAR" = "b" ]
  then
    # di), delete inside of a pair of parenthesis
    LCHAR="("
    RCHAR=")"

  elif [ "$CHAR" = "[" ] || [ "$CHAR" = "]" ]
  then
    # di], delete inside of a pair of square brackets
    LCHAR="["
    RCHAR="]"

  elif [ $CHAR = "{" ] || [ $CHAR = "}" ] || [ "$CHAR" = "B" ]
  then
    # di}, delete inside of a pair of braces
    LCHAR="{"
    RCHAR="}"

  else
    # The character entered does not have a special definition.
    # Simply find the first instance to the left and right of the cursor.
    LCHAR="$CHAR"
    RCHAR="$CHAR"
  fi

  # Find the first instance of LCHAR to the left of the cursor and the
  # first instance of RCHAR to the right of the cursor, and remove everything in between.
  # Begin the search for the left-sided character directly the left of the cursor
  LSEARCH=${#LBUFFER}

  # Keep going left until we find the character or hit the beginning of the buffer
  while [ "$LSEARCH" -gt 0 ] && [ "$LBUFFER[$LSEARCH]" != "$LCHAR" ]
  do
LSEARCH=$(expr $LSEARCH - 1)
  done

  # If we hit the beginning of the command line without finding the character, abort
  if [ "$LBUFFER[$LSEARCH]" != "$LCHAR" ]
  then
return
fi

  # start the search directly to the right of the cursor
  RSEARCH=0

  # Keep going right until we find the character or hit the end of the buffer
  while [ "$RSEARCH" -lt $(expr ${#RBUFFER} + 1 ) ] && [ "$RBUFFER[$RSEARCH]" != "$RCHAR" ]
  do
RSEARCH=$(expr $RSEARCH + 1)
  done

  # If we hit the end of the command line without finding the character, abort
  if [ "$RBUFFER[$RSEARCH]" != "$RCHAR" ]
  then
return
fi

  # Set the BUFFER to everything except the text we are removing
  RBUFFER="$RBUFFER[$RSEARCH,${#RBUFFER}]"
  LBUFFER="$LBUFFER[1,$LSEARCH]"
}

zle -N delete-in


# Delete all characters between a pair of characters and then go to insert mode
# Mimics vim's "ci" text object functionality.
function change-in {
  zle delete-in
  zle vi-insert
}
zle -N change-in

# Delete all characters between a pair of characters as well as the surrounding
# characters themselves. Mimics vim's "da" text object functionality
function delete-around {
  zle delete-in
  zle vi-backward-char
  zle vi-delete-char
  zle vi-delete-char
}
zle -N delete-around

# Delete all characters between a pair of characters as well as the surrounding
# characters themselves and then go into insert mode. Mimics vim's "ca" text object functionality.
function change-around {
  zle delete-in
  zle vi-backward-char
  zle vi-delete-char
  zle vi-delete-char
  zle vi-insert
}
zle -N change-around


# KEY BINDINGS

# VIM style keybindings by default
bindkey -v

# edit command line
autoload -U edit-command-line
zle -N edit-command-line
bindkey '\C-x\C-e' edit-command-line

alias ←="pushd -q +1"
alias →="pushd -q -0"

case "$TERM" in
  *xterm*|screen-256color)
    # alt + arrows
    bindkey '[D' backward-word
    bindkey '[C' forward-word
    bindkey '^[[1;3D' backward-word
    bindkey '^[[1;3C' forward-word

    # ctrl + arrows
    bindkey '^[OD' backward-word
    bindkey '^[OC' forward-word
    bindkey '^[[1;5D' backward-word
    bindkey '^[[1;5C' forward-word

    # home / end
    bindkey '^[[1~' beginning-of-line
    bindkey '^[[4~' end-of-line

    # delete
    bindkey '^[[3~' delete-char

    # page up / page down
    bindkey '^[[5~' history-beginning-search-backward
    bindkey '^[[6~' history-beginning-search-forward

    # shift + tab
    bindkey '^[[Z' reverse-menu-complete


    # VI MODE KEYBINDINGS (ins mode)
    bindkey -M viins '^a' beginning-of-line
    bindkey -M viins '^e' end-of-line
    bindkey -M viins -s '^b' "←\n" # C-b move to previous directory (in history)
    bindkey -M viins -s '^f' "→\n" # C-f move to next directory (in history)
    bindkey -M viins '^k' kill-line
    bindkey -M viins '^r' history-incremental-pattern-search-backward
    bindkey -M viins '^s' history-incremental-pattern-search-forward
    bindkey -M viins '^o' history-beginning-search-backward
    bindkey -M viins '^p' history-beginning-search-backward
    bindkey -M viins '^n' history-beginning-search-forward
    bindkey -M viins '^y' yank
    bindkey -M viins '^w' backward-kill-word
    bindkey -M viins '^u' backward-kill-line
    bindkey -M viins '^h' backward-delete-char
    bindkey -M viins '^?' backward-delete-char
    bindkey -M viins '^_' undo
    bindkey -M viins '^x^l' history-beginning-search-backward-then-append
    bindkey -M viins '^x^r' redisplay
    bindkey -M viins '\eOH' beginning-of-line # Home
    bindkey -M viins '\eOF' end-of-line # End
    bindkey -M viins '\e[2~' overwrite-mode # Insert


    # VI MODE KEYBINDINGS (cmd mode)
    bindkey -M vicmd 'ca' change-around
    bindkey -M vicmd 'ci' change-in
    bindkey -M vicmd 'da' delete-around
    bindkey -M vicmd 'di' delete-in
    bindkey -M vicmd 'ga' what-cursor-position
    bindkey -M vicmd 'gg' beginning-of-history
    bindkey -M vicmd 'G ' end-of-history
    bindkey -M vicmd '^a' beginning-of-line
    bindkey -M vicmd '^e' end-of-line
    bindkey -M vicmd '^k' kill-line
    bindkey -M vicmd '^r' history-incremental-pattern-search-backward
    bindkey -M vicmd '^s' history-incremental-pattern-search-forward
    bindkey -M vicmd '^o' history-beginning-search-backward
    bindkey -M vicmd '^p' history-beginning-search-backward
    bindkey -M vicmd '^n' history-beginning-search-forward
    bindkey -M vicmd '^y' yank
    bindkey -M vicmd '^w' backward-kill-word
    bindkey -M vicmd '^u' backward-kill-line
    bindkey -M vicmd '/' vi-history-search-forward
    bindkey -M vicmd '?' vi-history-search-backward
    bindkey -M vicmd '^_' undo
    bindkey -M vicmd '\ef' forward-word # Alt-f
    bindkey -M vicmd '\eb' backward-word # Alt-b
    bindkey -M vicmd '\ed' kill-word # Alt-d
    bindkey -M vicmd '\e[5~' history-beginning-search-backward # PageUp
    bindkey -M vicmd '\e[6~' history-beginning-search-forward # PageDown
  ;;
esac


# Encoding
export LANG=en_us.UTF-8
export LC_CTYPE=en_us.UTF-8


# Virtualbox
#
delvm() { vboxmanage controlvm $* poweroff && vboxmanage unregistervm $* --delete }
alias vboxdeleteall="vboxmanage list vms | awk -F ' ' '{print $2}' | awk '{ gsub(/{|}/, \"\"); print }' | xargs -n 1 -I delvm"

# PATH
export ANDROID_HOME=$HOME/Library/Android/sdk
export JAVA_HOME="/Applications/Android Studio.app/Contents/jre/jdk/Contents/Home"
export PATH=~/env:~/bin:$ANDROID_HOME/tools/bin:$PATH

# ENV specific files
for env in $(find $HOME/.env/zsh/*.env); do source $env; done